"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterMapping = exports.MappingValue = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
;
/**
 * (experimental) Represents a Mapping Value.
 *
 * @experimental
 */
class MappingValue {
    /**
     * @experimental
     */
    constructor(value) {
        this.value = value;
    }
    /**
     * (experimental) Creates a header mapping value.
     *
     * @experimental
     */
    static requestHeader(name) { return new MappingValue(`$request.header.${name}`); }
    /**
     * (experimental) Creates a query string mapping value.
     *
     * @experimental
     */
    static requestQueryString(name) { return new MappingValue(`$request.querystring.${name}`); }
    /**
     * (experimental) Creates a request body mapping value.
     *
     * @experimental
     */
    static requestBody(name) { return new MappingValue(`$request.body.${name}`); }
    /**
     * (experimental) Creates a request path mapping value.
     *
     * @experimental
     */
    static requestPath() { return new MappingValue('$request.path'); }
    /**
     * (experimental) Creates a request path parameter mapping value.
     *
     * @experimental
     */
    static requestPathParam(name) { return new MappingValue(`$request.path.${name}`); }
    /**
     * (experimental) Creates a context variable mapping value.
     *
     * @experimental
     */
    static contextVariable(variableName) { return new MappingValue(`$context.${variableName}`); }
    /**
     * (experimental) Creates a stage variable mapping value.
     *
     * @experimental
     */
    static stageVariable(variableName) { return new MappingValue(`$stageVariables.${variableName}`); }
    /**
     * (experimental) Creates a custom mapping value.
     *
     * @experimental
     */
    static custom(value) { return new MappingValue(value); }
}
exports.MappingValue = MappingValue;
_a = JSII_RTTI_SYMBOL_1;
MappingValue[_a] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.MappingValue", version: "2.8.0-alpha.0" };
/**
 * (experimental) Creates an empty mapping value.
 *
 * @experimental
 */
MappingValue.NONE = new MappingValue('');
/**
 * (experimental) Represents a Parameter Mapping.
 *
 * @experimental
 */
class ParameterMapping {
    /**
     * @experimental
     */
    constructor() {
        this.mappings = {};
    }
    /**
     * (experimental) Creates a mapping from an object.
     *
     * @experimental
     */
    static fromObject(obj) {
        const mapping = new ParameterMapping();
        for (const [k, m] of Object.entries(obj)) {
            mapping.custom(k, m.value);
        }
        return mapping;
    }
    /**
     * (experimental) Creates a mapping to append a header.
     *
     * @experimental
     */
    appendHeader(name, value) {
        jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_MappingValue(value);
        this.mappings[`append:header.${name}`] = value.value;
        return this;
    }
    /**
     * (experimental) Creates a mapping to overwrite a header.
     *
     * @experimental
     */
    overwriteHeader(name, value) {
        jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_MappingValue(value);
        this.mappings[`overwrite:header.${name}`] = value.value;
        return this;
    }
    /**
     * (experimental) Creates a mapping to remove a header.
     *
     * @experimental
     */
    removeHeader(name) {
        this.mappings[`remove:header.${name}`] = '';
        return this;
    }
    /**
     * (experimental) Creates a mapping to append a query string.
     *
     * @experimental
     */
    appendQueryString(name, value) {
        jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_MappingValue(value);
        this.mappings[`append:querystring.${name}`] = value.value;
        return this;
    }
    /**
     * (experimental) Creates a mapping to overwrite a querystring.
     *
     * @experimental
     */
    overwriteQueryString(name, value) {
        jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_MappingValue(value);
        this.mappings[`overwrite:querystring.${name}`] = value.value;
        return this;
    }
    /**
     * (experimental) Creates a mapping to remove a querystring.
     *
     * @experimental
     */
    removeQueryString(name) {
        this.mappings[`remove:querystring.${name}`] = '';
        return this;
    }
    /**
     * (experimental) Creates a mapping to overwrite a path.
     *
     * @experimental
     */
    overwritePath(value) {
        jsiiDeprecationWarnings._aws_cdk_aws_apigatewayv2_alpha_MappingValue(value);
        this.mappings['overwrite:path'] = value.value;
        return this;
    }
    /**
     * (experimental) Creates a custom mapping.
     *
     * @experimental
     */
    custom(key, value) {
        this.mappings[key] = value;
        return this;
    }
}
exports.ParameterMapping = ParameterMapping;
_b = JSII_RTTI_SYMBOL_1;
ParameterMapping[_b] = { fqn: "@aws-cdk/aws-apigatewayv2-alpha.ParameterMapping", version: "2.8.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,