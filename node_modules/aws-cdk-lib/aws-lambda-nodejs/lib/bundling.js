"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Bundling=void 0;const os=require("os"),path=require("path"),aws_lambda_1=require("../../aws-lambda"),cdk=require("../../core"),package_installation_1=require("./package-installation"),package_manager_1=require("./package-manager"),types_1=require("./types"),util_1=require("./util"),ESBUILD_MAJOR_VERSION="0";class Bundling{constructor(props){var _a,_b,_c,_d,_e,_f,_g;if(this.props=props,this.packageManager=package_manager_1.PackageManager.fromLockFile(props.depsLockFilePath),Bundling.esbuildInstallation=(_a=Bundling.esbuildInstallation)!==null&&_a!==void 0?_a:package_installation_1.PackageInstallation.detect("esbuild"),Bundling.tscInstallation=(_b=Bundling.tscInstallation)!==null&&_b!==void 0?_b:package_installation_1.PackageInstallation.detect("tsc"),this.projectRoot=props.projectRoot,this.relativeEntryPath=path.relative(this.projectRoot,path.resolve(props.entry)),this.relativeDepsLockFilePath=path.relative(this.projectRoot,path.resolve(props.depsLockFilePath)),this.relativeDepsLockFilePath.includes(".."))throw new Error(`Expected depsLockFilePath: ${props.depsLockFilePath} to be under projectRoot: ${this.projectRoot} (${this.relativeDepsLockFilePath})`);if(props.tsconfig&&(this.relativeTsconfigPath=path.relative(this.projectRoot,path.resolve(props.tsconfig))),props.preCompilation&&!/\.tsx?$/.test(props.entry))throw new Error("preCompilation can only be used with typescript files");if(props.format===types_1.OutputFormat.ESM&&(props.runtime===aws_lambda_1.Runtime.NODEJS_10_X||props.runtime===aws_lambda_1.Runtime.NODEJS_12_X))throw new Error(`ECMAScript module output format is not supported by the ${props.runtime.name} runtime`);this.externals=[...(_c=props.externalModules)!==null&&_c!==void 0?_c:["aws-sdk"],...(_d=props.nodeModules)!==null&&_d!==void 0?_d:[]];const shouldBuildImage=props.forceDockerBundling||!Bundling.esbuildInstallation;this.image=shouldBuildImage?(_e=props.dockerImage)!==null&&_e!==void 0?_e:cdk.DockerImage.fromBuild(path.join(__dirname,"../lib"),{buildArgs:{...(_f=props.buildArgs)!==null&&_f!==void 0?_f:{},IMAGE:props.runtime.bundlingImage.image,ESBUILD_VERSION:(_g=props.esbuildVersion)!==null&&_g!==void 0?_g:ESBUILD_MAJOR_VERSION},platform:props.architecture.dockerPlatform}):cdk.DockerImage.fromRegistry("dummy");const bundlingCommand=this.createBundlingCommand({inputDir:cdk.AssetStaging.BUNDLING_INPUT_DIR,outputDir:cdk.AssetStaging.BUNDLING_OUTPUT_DIR,esbuildRunner:"esbuild",tscRunner:"tsc",osPlatform:"linux"});this.command=["bash","-c",bundlingCommand],this.environment=props.environment,this.workingDirectory="/",props.forceDockerBundling||(this.local=this.getLocalBundlingProvider())}static bundle(options){return aws_lambda_1.Code.fromAsset(options.projectRoot,{assetHash:options.assetHash,assetHashType:options.assetHash?cdk.AssetHashType.CUSTOM:cdk.AssetHashType.OUTPUT,bundling:new Bundling(options)})}static clearEsbuildInstallationCache(){this.esbuildInstallation=void 0}static clearTscInstallationCache(){this.tscInstallation=void 0}static clearTscCompilationCache(){this.tscCompiled=!1}createBundlingCommand(options){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o;const pathJoin=osPathJoin(options.osPlatform);let tscCommand="",relativeEntryPath=this.relativeEntryPath;if(this.props.preCompilation){let tsconfig=this.relativeTsconfigPath;if(!tsconfig){const findConfig=util_1.findUp("tsconfig.json",path.dirname(this.props.entry));if(!findConfig)throw new Error("Cannot find a tsconfig.json, please specify the prop: tsconfig");tsconfig=path.relative(this.projectRoot,findConfig)}relativeEntryPath=relativeEntryPath.replace(/\.ts(x?)$/,".js$1"),Bundling.tscCompiled||(tscCommand=`${options.tscRunner} --project ${pathJoin(options.inputDir,tsconfig)} --rootDir ./ --outDir ./`,Bundling.tscCompiled=!0)}const loaders=Object.entries((_a=this.props.loader)!==null&&_a!==void 0?_a:{}),defines=Object.entries((_b=this.props.define)!==null&&_b!==void 0?_b:{});if(this.props.sourceMap===!1&&this.props.sourceMapMode)throw new Error("sourceMapMode cannot be used when sourceMap is false");const sourceMapEnabled=(_c=this.props.sourceMapMode)!==null&&_c!==void 0?_c:this.props.sourceMap,sourceMapValue=((_d=this.props.sourceMapMode)!==null&&_d!==void 0?_d:types_1.SourceMapMode.DEFAULT)===types_1.SourceMapMode.DEFAULT?"":`=${this.props.sourceMapMode}`,sourcesContent=(_e=this.props.sourcesContent)!==null&&_e!==void 0?_e:!0,outFile=this.props.format===types_1.OutputFormat.ESM?"index.mjs":"index.js",esbuildCommand=[options.esbuildRunner,"--bundle",`"${pathJoin(options.inputDir,relativeEntryPath)}"`,`--target=${(_f=this.props.target)!==null&&_f!==void 0?_f:toTarget(this.props.runtime)}`,"--platform=node",...this.props.format?[`--format=${this.props.format}`]:[],`--outfile="${pathJoin(options.outputDir,outFile)}"`,...this.props.minify?["--minify"]:[],...sourceMapEnabled?[`--sourcemap${sourceMapValue}`]:[],...sourcesContent?[]:[`--sources-content=${sourcesContent}`],...this.externals.map(external=>`--external:${external}`),...loaders.map(([ext,name])=>`--loader:${ext}=${name}`),...defines.map(([key,value])=>`--define:${key}=${JSON.stringify(value)}`),...this.props.logLevel?[`--log-level=${this.props.logLevel}`]:[],...this.props.keepNames?["--keep-names"]:[],...this.relativeTsconfigPath?[`--tsconfig=${pathJoin(options.inputDir,this.relativeTsconfigPath)}`]:[],...this.props.metafile?[`--metafile=${pathJoin(options.outputDir,"index.meta.json")}`]:[],...this.props.banner?[`--banner:js=${JSON.stringify(this.props.banner)}`]:[],...this.props.footer?[`--footer:js=${JSON.stringify(this.props.footer)}`]:[],...this.props.charset?[`--charset=${this.props.charset}`]:[]];let depsCommand="";if(this.props.nodeModules){const pkgPath=util_1.findUp("package.json",path.dirname(this.props.entry));if(!pkgPath)throw new Error("Cannot find a `package.json` in this project. Using `nodeModules` requires a `package.json`.");const dependencies=util_1.extractDependencies(pkgPath,this.props.nodeModules),osCommand=new OsCommand(options.osPlatform),lockFilePath=pathJoin(options.inputDir,(_g=this.relativeDepsLockFilePath)!==null&&_g!==void 0?_g:this.packageManager.lockFile);depsCommand=chain([osCommand.writeJson(pathJoin(options.outputDir,"package.json"),{dependencies}),osCommand.copy(lockFilePath,pathJoin(options.outputDir,this.packageManager.lockFile)),osCommand.changeDirectory(options.outputDir),this.packageManager.installCommand.join(" ")])}return chain([...(_j=(_h=this.props.commandHooks)===null||_h===void 0?void 0:_h.beforeBundling(options.inputDir,options.outputDir))!==null&&_j!==void 0?_j:[],tscCommand,esbuildCommand.join(" "),...(_l=this.props.nodeModules&&((_k=this.props.commandHooks)===null||_k===void 0?void 0:_k.beforeInstall(options.inputDir,options.outputDir)))!==null&&_l!==void 0?_l:[],depsCommand,...(_o=(_m=this.props.commandHooks)===null||_m===void 0?void 0:_m.afterBundling(options.inputDir,options.outputDir))!==null&&_o!==void 0?_o:[]])}getLocalBundlingProvider(){var _a;const osPlatform=os.platform(),createLocalCommand=(outputDir,esbuild,tsc)=>this.createBundlingCommand({inputDir:this.projectRoot,outputDir,esbuildRunner:esbuild.isLocal?this.packageManager.runBinCommand("esbuild"):"esbuild",tscRunner:tsc&&(tsc.isLocal?this.packageManager.runBinCommand("tsc"):"tsc"),osPlatform}),environment=(_a=this.props.environment)!==null&&_a!==void 0?_a:{},cwd=this.projectRoot;return{tryBundle(outputDir){if(!Bundling.esbuildInstallation)return process.stderr.write(`esbuild cannot run locally. Switching to Docker bundling.
`),!1;if(!Bundling.esbuildInstallation.version.startsWith(`${ESBUILD_MAJOR_VERSION}.`))throw new Error(`Expected esbuild version ${ESBUILD_MAJOR_VERSION}.x but got ${Bundling.esbuildInstallation.version}`);const localCommand=createLocalCommand(outputDir,Bundling.esbuildInstallation,Bundling.tscInstallation);return util_1.exec(osPlatform==="win32"?"cmd":"bash",[osPlatform==="win32"?"/c":"-c",localCommand],{env:{...process.env,...environment},stdio:["ignore",process.stderr,"inherit"],cwd,windowsVerbatimArguments:osPlatform==="win32"}),!0}}}}exports.Bundling=Bundling,Bundling.tscCompiled=!1;class OsCommand{constructor(osPlatform){this.osPlatform=osPlatform}writeJson(filePath,data){const stringifiedData=JSON.stringify(data);return this.osPlatform==="win32"?`echo ^${stringifiedData}^ > "${filePath}"`:`echo '${stringifiedData}' > "${filePath}"`}copy(src,dest){return this.osPlatform==="win32"?`copy "${src}" "${dest}"`:`cp "${src}" "${dest}"`}changeDirectory(dir){return`cd "${dir}"`}}function chain(commands){return commands.filter(c=>!!c).join(" && ")}function osPathJoin(platform){return function(...paths){const joined=path.join(...paths);return os.platform()==="win32"&&platform!=="win32"?joined.replace(/\\/g,"/"):joined}}function toTarget(runtime){const match=runtime.name.match(/nodejs(\d+)/);if(!match)throw new Error("Cannot extract version from runtime.");return`node${match[1]}`}
//# sourceMappingURL=bundling.js.map
