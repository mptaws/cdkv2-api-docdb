"use strict";var _a,_b,_c,_d;Object.defineProperty(exports,"__esModule",{value:!0}),exports.CfnStaticIp=exports.CfnInstance=exports.CfnDisk=exports.CfnDatabase=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),cdk=require("../../core"),cfn_parse=require("../../core/lib/cfn-parse");function CfnDatabasePropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("availabilityZone",cdk.validateString)(properties.availabilityZone)),errors.collect(cdk.propertyValidator("backupRetention",cdk.validateBoolean)(properties.backupRetention)),errors.collect(cdk.propertyValidator("caCertificateIdentifier",cdk.validateString)(properties.caCertificateIdentifier)),errors.collect(cdk.propertyValidator("masterDatabaseName",cdk.requiredValidator)(properties.masterDatabaseName)),errors.collect(cdk.propertyValidator("masterDatabaseName",cdk.validateString)(properties.masterDatabaseName)),errors.collect(cdk.propertyValidator("masterUserPassword",cdk.validateString)(properties.masterUserPassword)),errors.collect(cdk.propertyValidator("masterUsername",cdk.requiredValidator)(properties.masterUsername)),errors.collect(cdk.propertyValidator("masterUsername",cdk.validateString)(properties.masterUsername)),errors.collect(cdk.propertyValidator("preferredBackupWindow",cdk.validateString)(properties.preferredBackupWindow)),errors.collect(cdk.propertyValidator("preferredMaintenanceWindow",cdk.validateString)(properties.preferredMaintenanceWindow)),errors.collect(cdk.propertyValidator("publiclyAccessible",cdk.validateBoolean)(properties.publiclyAccessible)),errors.collect(cdk.propertyValidator("relationalDatabaseBlueprintId",cdk.requiredValidator)(properties.relationalDatabaseBlueprintId)),errors.collect(cdk.propertyValidator("relationalDatabaseBlueprintId",cdk.validateString)(properties.relationalDatabaseBlueprintId)),errors.collect(cdk.propertyValidator("relationalDatabaseBundleId",cdk.requiredValidator)(properties.relationalDatabaseBundleId)),errors.collect(cdk.propertyValidator("relationalDatabaseBundleId",cdk.validateString)(properties.relationalDatabaseBundleId)),errors.collect(cdk.propertyValidator("relationalDatabaseName",cdk.requiredValidator)(properties.relationalDatabaseName)),errors.collect(cdk.propertyValidator("relationalDatabaseName",cdk.validateString)(properties.relationalDatabaseName)),errors.collect(cdk.propertyValidator("relationalDatabaseParameters",cdk.listValidator(CfnDatabase_RelationalDatabaseParameterPropertyValidator))(properties.relationalDatabaseParameters)),errors.collect(cdk.propertyValidator("rotateMasterUserPassword",cdk.validateBoolean)(properties.rotateMasterUserPassword)),errors.collect(cdk.propertyValidator("tags",cdk.listValidator(cdk.validateCfnTag))(properties.tags)),errors.wrap('supplied properties not correct for "CfnDatabaseProps"')}function cfnDatabasePropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnDatabasePropsValidator(properties).assertSuccess(),{MasterDatabaseName:cdk.stringToCloudFormation(properties.masterDatabaseName),MasterUsername:cdk.stringToCloudFormation(properties.masterUsername),RelationalDatabaseBlueprintId:cdk.stringToCloudFormation(properties.relationalDatabaseBlueprintId),RelationalDatabaseBundleId:cdk.stringToCloudFormation(properties.relationalDatabaseBundleId),RelationalDatabaseName:cdk.stringToCloudFormation(properties.relationalDatabaseName),AvailabilityZone:cdk.stringToCloudFormation(properties.availabilityZone),BackupRetention:cdk.booleanToCloudFormation(properties.backupRetention),CaCertificateIdentifier:cdk.stringToCloudFormation(properties.caCertificateIdentifier),MasterUserPassword:cdk.stringToCloudFormation(properties.masterUserPassword),PreferredBackupWindow:cdk.stringToCloudFormation(properties.preferredBackupWindow),PreferredMaintenanceWindow:cdk.stringToCloudFormation(properties.preferredMaintenanceWindow),PubliclyAccessible:cdk.booleanToCloudFormation(properties.publiclyAccessible),RelationalDatabaseParameters:cdk.listMapper(cfnDatabaseRelationalDatabaseParameterPropertyToCloudFormation)(properties.relationalDatabaseParameters),RotateMasterUserPassword:cdk.booleanToCloudFormation(properties.rotateMasterUserPassword),Tags:cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)}):properties}function CfnDatabasePropsFromCloudFormation(properties){if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("masterDatabaseName","MasterDatabaseName",cfn_parse.FromCloudFormation.getString(properties.MasterDatabaseName)),ret.addPropertyResult("masterUsername","MasterUsername",cfn_parse.FromCloudFormation.getString(properties.MasterUsername)),ret.addPropertyResult("relationalDatabaseBlueprintId","RelationalDatabaseBlueprintId",cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseBlueprintId)),ret.addPropertyResult("relationalDatabaseBundleId","RelationalDatabaseBundleId",cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseBundleId)),ret.addPropertyResult("relationalDatabaseName","RelationalDatabaseName",cfn_parse.FromCloudFormation.getString(properties.RelationalDatabaseName)),ret.addPropertyResult("availabilityZone","AvailabilityZone",properties.AvailabilityZone!=null?cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone):void 0),ret.addPropertyResult("backupRetention","BackupRetention",properties.BackupRetention!=null?cfn_parse.FromCloudFormation.getBoolean(properties.BackupRetention):void 0),ret.addPropertyResult("caCertificateIdentifier","CaCertificateIdentifier",properties.CaCertificateIdentifier!=null?cfn_parse.FromCloudFormation.getString(properties.CaCertificateIdentifier):void 0),ret.addPropertyResult("masterUserPassword","MasterUserPassword",properties.MasterUserPassword!=null?cfn_parse.FromCloudFormation.getString(properties.MasterUserPassword):void 0),ret.addPropertyResult("preferredBackupWindow","PreferredBackupWindow",properties.PreferredBackupWindow!=null?cfn_parse.FromCloudFormation.getString(properties.PreferredBackupWindow):void 0),ret.addPropertyResult("preferredMaintenanceWindow","PreferredMaintenanceWindow",properties.PreferredMaintenanceWindow!=null?cfn_parse.FromCloudFormation.getString(properties.PreferredMaintenanceWindow):void 0),ret.addPropertyResult("publiclyAccessible","PubliclyAccessible",properties.PubliclyAccessible!=null?cfn_parse.FromCloudFormation.getBoolean(properties.PubliclyAccessible):void 0),ret.addPropertyResult("relationalDatabaseParameters","RelationalDatabaseParameters",properties.RelationalDatabaseParameters!=null?cfn_parse.FromCloudFormation.getArray(CfnDatabaseRelationalDatabaseParameterPropertyFromCloudFormation)(properties.RelationalDatabaseParameters):void 0),ret.addPropertyResult("rotateMasterUserPassword","RotateMasterUserPassword",properties.RotateMasterUserPassword!=null?cfn_parse.FromCloudFormation.getBoolean(properties.RotateMasterUserPassword):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnDatabase extends cdk.CfnResource{constructor(scope,id,props){super(scope,id,{type:CfnDatabase.CFN_RESOURCE_TYPE_NAME,properties:props});jsiiDeprecationWarnings.aws_cdk_lib_aws_lightsail_CfnDatabaseProps(props),cdk.requireProperty(props,"masterDatabaseName",this),cdk.requireProperty(props,"masterUsername",this),cdk.requireProperty(props,"relationalDatabaseBlueprintId",this),cdk.requireProperty(props,"relationalDatabaseBundleId",this),cdk.requireProperty(props,"relationalDatabaseName",this),this.attrDatabaseArn=cdk.Token.asString(this.getAtt("DatabaseArn")),this.masterDatabaseName=props.masterDatabaseName,this.masterUsername=props.masterUsername,this.relationalDatabaseBlueprintId=props.relationalDatabaseBlueprintId,this.relationalDatabaseBundleId=props.relationalDatabaseBundleId,this.relationalDatabaseName=props.relationalDatabaseName,this.availabilityZone=props.availabilityZone,this.backupRetention=props.backupRetention,this.caCertificateIdentifier=props.caCertificateIdentifier,this.masterUserPassword=props.masterUserPassword,this.preferredBackupWindow=props.preferredBackupWindow,this.preferredMaintenanceWindow=props.preferredMaintenanceWindow,this.publiclyAccessible=props.publiclyAccessible,this.relationalDatabaseParameters=props.relationalDatabaseParameters,this.rotateMasterUserPassword=props.rotateMasterUserPassword,this.tags=new cdk.TagManager(cdk.TagType.STANDARD,"AWS::Lightsail::Database",props.tags,{tagPropertyName:"tags"})}static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnDatabasePropsFromCloudFormation(resourceProperties),ret=new CfnDatabase(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}inspect(inspector){jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector),inspector.addAttribute("aws:cdk:cloudformation:type",CfnDatabase.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}get cfnProperties(){return{masterDatabaseName:this.masterDatabaseName,masterUsername:this.masterUsername,relationalDatabaseBlueprintId:this.relationalDatabaseBlueprintId,relationalDatabaseBundleId:this.relationalDatabaseBundleId,relationalDatabaseName:this.relationalDatabaseName,availabilityZone:this.availabilityZone,backupRetention:this.backupRetention,caCertificateIdentifier:this.caCertificateIdentifier,masterUserPassword:this.masterUserPassword,preferredBackupWindow:this.preferredBackupWindow,preferredMaintenanceWindow:this.preferredMaintenanceWindow,publiclyAccessible:this.publiclyAccessible,relationalDatabaseParameters:this.relationalDatabaseParameters,rotateMasterUserPassword:this.rotateMasterUserPassword,tags:this.tags.renderTags()}}renderProperties(props){return cfnDatabasePropsToCloudFormation(props)}}exports.CfnDatabase=CfnDatabase,_a=JSII_RTTI_SYMBOL_1,CfnDatabase[_a]={fqn:"aws-cdk-lib.aws_lightsail.CfnDatabase",version:"2.8.0"},CfnDatabase.CFN_RESOURCE_TYPE_NAME="AWS::Lightsail::Database";function CfnDatabase_RelationalDatabaseParameterPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("allowedValues",cdk.validateString)(properties.allowedValues)),errors.collect(cdk.propertyValidator("applyMethod",cdk.validateString)(properties.applyMethod)),errors.collect(cdk.propertyValidator("applyType",cdk.validateString)(properties.applyType)),errors.collect(cdk.propertyValidator("dataType",cdk.validateString)(properties.dataType)),errors.collect(cdk.propertyValidator("description",cdk.validateString)(properties.description)),errors.collect(cdk.propertyValidator("isModifiable",cdk.validateBoolean)(properties.isModifiable)),errors.collect(cdk.propertyValidator("parameterName",cdk.validateString)(properties.parameterName)),errors.collect(cdk.propertyValidator("parameterValue",cdk.validateString)(properties.parameterValue)),errors.wrap('supplied properties not correct for "RelationalDatabaseParameterProperty"')}function cfnDatabaseRelationalDatabaseParameterPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnDatabase_RelationalDatabaseParameterPropertyValidator(properties).assertSuccess(),{AllowedValues:cdk.stringToCloudFormation(properties.allowedValues),ApplyMethod:cdk.stringToCloudFormation(properties.applyMethod),ApplyType:cdk.stringToCloudFormation(properties.applyType),DataType:cdk.stringToCloudFormation(properties.dataType),Description:cdk.stringToCloudFormation(properties.description),IsModifiable:cdk.booleanToCloudFormation(properties.isModifiable),ParameterName:cdk.stringToCloudFormation(properties.parameterName),ParameterValue:cdk.stringToCloudFormation(properties.parameterValue)}):properties}function CfnDatabaseRelationalDatabaseParameterPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("allowedValues","AllowedValues",properties.AllowedValues!=null?cfn_parse.FromCloudFormation.getString(properties.AllowedValues):void 0),ret.addPropertyResult("applyMethod","ApplyMethod",properties.ApplyMethod!=null?cfn_parse.FromCloudFormation.getString(properties.ApplyMethod):void 0),ret.addPropertyResult("applyType","ApplyType",properties.ApplyType!=null?cfn_parse.FromCloudFormation.getString(properties.ApplyType):void 0),ret.addPropertyResult("dataType","DataType",properties.DataType!=null?cfn_parse.FromCloudFormation.getString(properties.DataType):void 0),ret.addPropertyResult("description","Description",properties.Description!=null?cfn_parse.FromCloudFormation.getString(properties.Description):void 0),ret.addPropertyResult("isModifiable","IsModifiable",properties.IsModifiable!=null?cfn_parse.FromCloudFormation.getBoolean(properties.IsModifiable):void 0),ret.addPropertyResult("parameterName","ParameterName",properties.ParameterName!=null?cfn_parse.FromCloudFormation.getString(properties.ParameterName):void 0),ret.addPropertyResult("parameterValue","ParameterValue",properties.ParameterValue!=null?cfn_parse.FromCloudFormation.getString(properties.ParameterValue):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnDiskPropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("addOns",cdk.listValidator(CfnDisk_AddOnPropertyValidator))(properties.addOns)),errors.collect(cdk.propertyValidator("availabilityZone",cdk.validateString)(properties.availabilityZone)),errors.collect(cdk.propertyValidator("diskName",cdk.requiredValidator)(properties.diskName)),errors.collect(cdk.propertyValidator("diskName",cdk.validateString)(properties.diskName)),errors.collect(cdk.propertyValidator("sizeInGb",cdk.requiredValidator)(properties.sizeInGb)),errors.collect(cdk.propertyValidator("sizeInGb",cdk.validateNumber)(properties.sizeInGb)),errors.collect(cdk.propertyValidator("tags",cdk.listValidator(cdk.validateCfnTag))(properties.tags)),errors.wrap('supplied properties not correct for "CfnDiskProps"')}function cfnDiskPropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnDiskPropsValidator(properties).assertSuccess(),{DiskName:cdk.stringToCloudFormation(properties.diskName),SizeInGb:cdk.numberToCloudFormation(properties.sizeInGb),AddOns:cdk.listMapper(cfnDiskAddOnPropertyToCloudFormation)(properties.addOns),AvailabilityZone:cdk.stringToCloudFormation(properties.availabilityZone),Tags:cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags)}):properties}function CfnDiskPropsFromCloudFormation(properties){if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("diskName","DiskName",cfn_parse.FromCloudFormation.getString(properties.DiskName)),ret.addPropertyResult("sizeInGb","SizeInGb",cfn_parse.FromCloudFormation.getNumber(properties.SizeInGb)),ret.addPropertyResult("addOns","AddOns",properties.AddOns!=null?cfn_parse.FromCloudFormation.getArray(CfnDiskAddOnPropertyFromCloudFormation)(properties.AddOns):void 0),ret.addPropertyResult("availabilityZone","AvailabilityZone",properties.AvailabilityZone!=null?cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnDisk extends cdk.CfnResource{constructor(scope,id,props){super(scope,id,{type:CfnDisk.CFN_RESOURCE_TYPE_NAME,properties:props});jsiiDeprecationWarnings.aws_cdk_lib_aws_lightsail_CfnDiskProps(props),cdk.requireProperty(props,"diskName",this),cdk.requireProperty(props,"sizeInGb",this),this.attrAttachedTo=cdk.Token.asString(this.getAtt("AttachedTo")),this.attrAttachmentState=cdk.Token.asString(this.getAtt("AttachmentState")),this.attrDiskArn=cdk.Token.asString(this.getAtt("DiskArn")),this.attrIops=cdk.Token.asNumber(this.getAtt("Iops")),this.attrIsAttached=this.getAtt("IsAttached"),this.attrPath=cdk.Token.asString(this.getAtt("Path")),this.attrResourceType=cdk.Token.asString(this.getAtt("ResourceType")),this.attrState=cdk.Token.asString(this.getAtt("State")),this.attrSupportCode=cdk.Token.asString(this.getAtt("SupportCode")),this.diskName=props.diskName,this.sizeInGb=props.sizeInGb,this.addOns=props.addOns,this.availabilityZone=props.availabilityZone,this.tags=new cdk.TagManager(cdk.TagType.STANDARD,"AWS::Lightsail::Disk",props.tags,{tagPropertyName:"tags"})}static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnDiskPropsFromCloudFormation(resourceProperties),ret=new CfnDisk(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}inspect(inspector){jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector),inspector.addAttribute("aws:cdk:cloudformation:type",CfnDisk.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}get cfnProperties(){return{diskName:this.diskName,sizeInGb:this.sizeInGb,addOns:this.addOns,availabilityZone:this.availabilityZone,tags:this.tags.renderTags()}}renderProperties(props){return cfnDiskPropsToCloudFormation(props)}}exports.CfnDisk=CfnDisk,_b=JSII_RTTI_SYMBOL_1,CfnDisk[_b]={fqn:"aws-cdk-lib.aws_lightsail.CfnDisk",version:"2.8.0"},CfnDisk.CFN_RESOURCE_TYPE_NAME="AWS::Lightsail::Disk";function CfnDisk_AddOnPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("addOnType",cdk.requiredValidator)(properties.addOnType)),errors.collect(cdk.propertyValidator("addOnType",cdk.validateString)(properties.addOnType)),errors.collect(cdk.propertyValidator("autoSnapshotAddOnRequest",CfnDisk_AutoSnapshotAddOnPropertyValidator)(properties.autoSnapshotAddOnRequest)),errors.collect(cdk.propertyValidator("status",cdk.validateString)(properties.status)),errors.wrap('supplied properties not correct for "AddOnProperty"')}function cfnDiskAddOnPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnDisk_AddOnPropertyValidator(properties).assertSuccess(),{AddOnType:cdk.stringToCloudFormation(properties.addOnType),AutoSnapshotAddOnRequest:cfnDiskAutoSnapshotAddOnPropertyToCloudFormation(properties.autoSnapshotAddOnRequest),Status:cdk.stringToCloudFormation(properties.status)}):properties}function CfnDiskAddOnPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("addOnType","AddOnType",cfn_parse.FromCloudFormation.getString(properties.AddOnType)),ret.addPropertyResult("autoSnapshotAddOnRequest","AutoSnapshotAddOnRequest",properties.AutoSnapshotAddOnRequest!=null?CfnDiskAutoSnapshotAddOnPropertyFromCloudFormation(properties.AutoSnapshotAddOnRequest):void 0),ret.addPropertyResult("status","Status",properties.Status!=null?cfn_parse.FromCloudFormation.getString(properties.Status):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnDisk_AutoSnapshotAddOnPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("snapshotTimeOfDay",cdk.validateString)(properties.snapshotTimeOfDay)),errors.wrap('supplied properties not correct for "AutoSnapshotAddOnProperty"')}function cfnDiskAutoSnapshotAddOnPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnDisk_AutoSnapshotAddOnPropertyValidator(properties).assertSuccess(),{SnapshotTimeOfDay:cdk.stringToCloudFormation(properties.snapshotTimeOfDay)}):properties}function CfnDiskAutoSnapshotAddOnPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("snapshotTimeOfDay","SnapshotTimeOfDay",properties.SnapshotTimeOfDay!=null?cfn_parse.FromCloudFormation.getString(properties.SnapshotTimeOfDay):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstancePropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("addOns",cdk.listValidator(CfnInstance_AddOnPropertyValidator))(properties.addOns)),errors.collect(cdk.propertyValidator("availabilityZone",cdk.validateString)(properties.availabilityZone)),errors.collect(cdk.propertyValidator("blueprintId",cdk.requiredValidator)(properties.blueprintId)),errors.collect(cdk.propertyValidator("blueprintId",cdk.validateString)(properties.blueprintId)),errors.collect(cdk.propertyValidator("bundleId",cdk.requiredValidator)(properties.bundleId)),errors.collect(cdk.propertyValidator("bundleId",cdk.validateString)(properties.bundleId)),errors.collect(cdk.propertyValidator("hardware",CfnInstance_HardwarePropertyValidator)(properties.hardware)),errors.collect(cdk.propertyValidator("instanceName",cdk.requiredValidator)(properties.instanceName)),errors.collect(cdk.propertyValidator("instanceName",cdk.validateString)(properties.instanceName)),errors.collect(cdk.propertyValidator("keyPairName",cdk.validateString)(properties.keyPairName)),errors.collect(cdk.propertyValidator("networking",CfnInstance_NetworkingPropertyValidator)(properties.networking)),errors.collect(cdk.propertyValidator("tags",cdk.listValidator(cdk.validateCfnTag))(properties.tags)),errors.collect(cdk.propertyValidator("userData",cdk.validateString)(properties.userData)),errors.wrap('supplied properties not correct for "CfnInstanceProps"')}function cfnInstancePropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstancePropsValidator(properties).assertSuccess(),{BlueprintId:cdk.stringToCloudFormation(properties.blueprintId),BundleId:cdk.stringToCloudFormation(properties.bundleId),InstanceName:cdk.stringToCloudFormation(properties.instanceName),AddOns:cdk.listMapper(cfnInstanceAddOnPropertyToCloudFormation)(properties.addOns),AvailabilityZone:cdk.stringToCloudFormation(properties.availabilityZone),Hardware:cfnInstanceHardwarePropertyToCloudFormation(properties.hardware),KeyPairName:cdk.stringToCloudFormation(properties.keyPairName),Networking:cfnInstanceNetworkingPropertyToCloudFormation(properties.networking),Tags:cdk.listMapper(cdk.cfnTagToCloudFormation)(properties.tags),UserData:cdk.stringToCloudFormation(properties.userData)}):properties}function CfnInstancePropsFromCloudFormation(properties){if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("blueprintId","BlueprintId",cfn_parse.FromCloudFormation.getString(properties.BlueprintId)),ret.addPropertyResult("bundleId","BundleId",cfn_parse.FromCloudFormation.getString(properties.BundleId)),ret.addPropertyResult("instanceName","InstanceName",cfn_parse.FromCloudFormation.getString(properties.InstanceName)),ret.addPropertyResult("addOns","AddOns",properties.AddOns!=null?cfn_parse.FromCloudFormation.getArray(CfnInstanceAddOnPropertyFromCloudFormation)(properties.AddOns):void 0),ret.addPropertyResult("availabilityZone","AvailabilityZone",properties.AvailabilityZone!=null?cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone):void 0),ret.addPropertyResult("hardware","Hardware",properties.Hardware!=null?CfnInstanceHardwarePropertyFromCloudFormation(properties.Hardware):void 0),ret.addPropertyResult("keyPairName","KeyPairName",properties.KeyPairName!=null?cfn_parse.FromCloudFormation.getString(properties.KeyPairName):void 0),ret.addPropertyResult("networking","Networking",properties.Networking!=null?CfnInstanceNetworkingPropertyFromCloudFormation(properties.Networking):void 0),ret.addPropertyResult("tags","Tags",properties.Tags!=null?cfn_parse.FromCloudFormation.getArray(cfn_parse.FromCloudFormation.getCfnTag)(properties.Tags):void 0),ret.addPropertyResult("userData","UserData",properties.UserData!=null?cfn_parse.FromCloudFormation.getString(properties.UserData):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnInstance extends cdk.CfnResource{constructor(scope,id,props){super(scope,id,{type:CfnInstance.CFN_RESOURCE_TYPE_NAME,properties:props});jsiiDeprecationWarnings.aws_cdk_lib_aws_lightsail_CfnInstanceProps(props),cdk.requireProperty(props,"blueprintId",this),cdk.requireProperty(props,"bundleId",this),cdk.requireProperty(props,"instanceName",this),this.attrHardwareCpuCount=cdk.Token.asNumber(this.getAtt("Hardware.CpuCount")),this.attrHardwareRamSizeInGb=cdk.Token.asNumber(this.getAtt("Hardware.RamSizeInGb")),this.attrInstanceArn=cdk.Token.asString(this.getAtt("InstanceArn")),this.attrIsStaticIp=this.getAtt("IsStaticIp"),this.attrLocationAvailabilityZone=cdk.Token.asString(this.getAtt("Location.AvailabilityZone")),this.attrLocationRegionName=cdk.Token.asString(this.getAtt("Location.RegionName")),this.attrNetworkingMonthlyTransferGbPerMonthAllocated=cdk.Token.asString(this.getAtt("Networking.MonthlyTransfer.GbPerMonthAllocated")),this.attrPrivateIpAddress=cdk.Token.asString(this.getAtt("PrivateIpAddress")),this.attrPublicIpAddress=cdk.Token.asString(this.getAtt("PublicIpAddress")),this.attrResourceType=cdk.Token.asString(this.getAtt("ResourceType")),this.attrSshKeyName=cdk.Token.asString(this.getAtt("SshKeyName")),this.attrStateCode=cdk.Token.asNumber(this.getAtt("State.Code")),this.attrStateName=cdk.Token.asString(this.getAtt("State.Name")),this.attrSupportCode=cdk.Token.asString(this.getAtt("SupportCode")),this.attrUserName=cdk.Token.asString(this.getAtt("UserName")),this.blueprintId=props.blueprintId,this.bundleId=props.bundleId,this.instanceName=props.instanceName,this.addOns=props.addOns,this.availabilityZone=props.availabilityZone,this.hardware=props.hardware,this.keyPairName=props.keyPairName,this.networking=props.networking,this.tags=new cdk.TagManager(cdk.TagType.STANDARD,"AWS::Lightsail::Instance",props.tags,{tagPropertyName:"tags"}),this.userData=props.userData}static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnInstancePropsFromCloudFormation(resourceProperties),ret=new CfnInstance(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}inspect(inspector){jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector),inspector.addAttribute("aws:cdk:cloudformation:type",CfnInstance.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}get cfnProperties(){return{blueprintId:this.blueprintId,bundleId:this.bundleId,instanceName:this.instanceName,addOns:this.addOns,availabilityZone:this.availabilityZone,hardware:this.hardware,keyPairName:this.keyPairName,networking:this.networking,tags:this.tags.renderTags(),userData:this.userData}}renderProperties(props){return cfnInstancePropsToCloudFormation(props)}}exports.CfnInstance=CfnInstance,_c=JSII_RTTI_SYMBOL_1,CfnInstance[_c]={fqn:"aws-cdk-lib.aws_lightsail.CfnInstance",version:"2.8.0"},CfnInstance.CFN_RESOURCE_TYPE_NAME="AWS::Lightsail::Instance";function CfnInstance_AddOnPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("addOnType",cdk.requiredValidator)(properties.addOnType)),errors.collect(cdk.propertyValidator("addOnType",cdk.validateString)(properties.addOnType)),errors.collect(cdk.propertyValidator("autoSnapshotAddOnRequest",CfnInstance_AutoSnapshotAddOnPropertyValidator)(properties.autoSnapshotAddOnRequest)),errors.collect(cdk.propertyValidator("status",cdk.validateString)(properties.status)),errors.wrap('supplied properties not correct for "AddOnProperty"')}function cfnInstanceAddOnPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_AddOnPropertyValidator(properties).assertSuccess(),{AddOnType:cdk.stringToCloudFormation(properties.addOnType),AutoSnapshotAddOnRequest:cfnInstanceAutoSnapshotAddOnPropertyToCloudFormation(properties.autoSnapshotAddOnRequest),Status:cdk.stringToCloudFormation(properties.status)}):properties}function CfnInstanceAddOnPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("addOnType","AddOnType",cfn_parse.FromCloudFormation.getString(properties.AddOnType)),ret.addPropertyResult("autoSnapshotAddOnRequest","AutoSnapshotAddOnRequest",properties.AutoSnapshotAddOnRequest!=null?CfnInstanceAutoSnapshotAddOnPropertyFromCloudFormation(properties.AutoSnapshotAddOnRequest):void 0),ret.addPropertyResult("status","Status",properties.Status!=null?cfn_parse.FromCloudFormation.getString(properties.Status):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_AutoSnapshotAddOnPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("snapshotTimeOfDay",cdk.validateString)(properties.snapshotTimeOfDay)),errors.wrap('supplied properties not correct for "AutoSnapshotAddOnProperty"')}function cfnInstanceAutoSnapshotAddOnPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_AutoSnapshotAddOnPropertyValidator(properties).assertSuccess(),{SnapshotTimeOfDay:cdk.stringToCloudFormation(properties.snapshotTimeOfDay)}):properties}function CfnInstanceAutoSnapshotAddOnPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("snapshotTimeOfDay","SnapshotTimeOfDay",properties.SnapshotTimeOfDay!=null?cfn_parse.FromCloudFormation.getString(properties.SnapshotTimeOfDay):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_DiskPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("attachedTo",cdk.validateString)(properties.attachedTo)),errors.collect(cdk.propertyValidator("attachmentState",cdk.validateString)(properties.attachmentState)),errors.collect(cdk.propertyValidator("diskName",cdk.requiredValidator)(properties.diskName)),errors.collect(cdk.propertyValidator("diskName",cdk.validateString)(properties.diskName)),errors.collect(cdk.propertyValidator("iops",cdk.validateNumber)(properties.iops)),errors.collect(cdk.propertyValidator("isSystemDisk",cdk.validateBoolean)(properties.isSystemDisk)),errors.collect(cdk.propertyValidator("path",cdk.requiredValidator)(properties.path)),errors.collect(cdk.propertyValidator("path",cdk.validateString)(properties.path)),errors.collect(cdk.propertyValidator("sizeInGb",cdk.validateString)(properties.sizeInGb)),errors.wrap('supplied properties not correct for "DiskProperty"')}function cfnInstanceDiskPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_DiskPropertyValidator(properties).assertSuccess(),{AttachedTo:cdk.stringToCloudFormation(properties.attachedTo),AttachmentState:cdk.stringToCloudFormation(properties.attachmentState),DiskName:cdk.stringToCloudFormation(properties.diskName),IOPS:cdk.numberToCloudFormation(properties.iops),IsSystemDisk:cdk.booleanToCloudFormation(properties.isSystemDisk),Path:cdk.stringToCloudFormation(properties.path),SizeInGb:cdk.stringToCloudFormation(properties.sizeInGb)}):properties}function CfnInstanceDiskPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("attachedTo","AttachedTo",properties.AttachedTo!=null?cfn_parse.FromCloudFormation.getString(properties.AttachedTo):void 0),ret.addPropertyResult("attachmentState","AttachmentState",properties.AttachmentState!=null?cfn_parse.FromCloudFormation.getString(properties.AttachmentState):void 0),ret.addPropertyResult("diskName","DiskName",cfn_parse.FromCloudFormation.getString(properties.DiskName)),ret.addPropertyResult("iops","IOPS",properties.IOPS!=null?cfn_parse.FromCloudFormation.getNumber(properties.IOPS):void 0),ret.addPropertyResult("isSystemDisk","IsSystemDisk",properties.IsSystemDisk!=null?cfn_parse.FromCloudFormation.getBoolean(properties.IsSystemDisk):void 0),ret.addPropertyResult("path","Path",cfn_parse.FromCloudFormation.getString(properties.Path)),ret.addPropertyResult("sizeInGb","SizeInGb",properties.SizeInGb!=null?cfn_parse.FromCloudFormation.getString(properties.SizeInGb):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_HardwarePropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("cpuCount",cdk.validateNumber)(properties.cpuCount)),errors.collect(cdk.propertyValidator("disks",cdk.listValidator(CfnInstance_DiskPropertyValidator))(properties.disks)),errors.collect(cdk.propertyValidator("ramSizeInGb",cdk.validateNumber)(properties.ramSizeInGb)),errors.wrap('supplied properties not correct for "HardwareProperty"')}function cfnInstanceHardwarePropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_HardwarePropertyValidator(properties).assertSuccess(),{CpuCount:cdk.numberToCloudFormation(properties.cpuCount),Disks:cdk.listMapper(cfnInstanceDiskPropertyToCloudFormation)(properties.disks),RamSizeInGb:cdk.numberToCloudFormation(properties.ramSizeInGb)}):properties}function CfnInstanceHardwarePropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("cpuCount","CpuCount",properties.CpuCount!=null?cfn_parse.FromCloudFormation.getNumber(properties.CpuCount):void 0),ret.addPropertyResult("disks","Disks",properties.Disks!=null?cfn_parse.FromCloudFormation.getArray(CfnInstanceDiskPropertyFromCloudFormation)(properties.Disks):void 0),ret.addPropertyResult("ramSizeInGb","RamSizeInGb",properties.RamSizeInGb!=null?cfn_parse.FromCloudFormation.getNumber(properties.RamSizeInGb):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_LocationPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("availabilityZone",cdk.validateString)(properties.availabilityZone)),errors.collect(cdk.propertyValidator("regionName",cdk.validateString)(properties.regionName)),errors.wrap('supplied properties not correct for "LocationProperty"')}function cfnInstanceLocationPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_LocationPropertyValidator(properties).assertSuccess(),{AvailabilityZone:cdk.stringToCloudFormation(properties.availabilityZone),RegionName:cdk.stringToCloudFormation(properties.regionName)}):properties}function CfnInstanceLocationPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("availabilityZone","AvailabilityZone",properties.AvailabilityZone!=null?cfn_parse.FromCloudFormation.getString(properties.AvailabilityZone):void 0),ret.addPropertyResult("regionName","RegionName",properties.RegionName!=null?cfn_parse.FromCloudFormation.getString(properties.RegionName):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_MonthlyTransferPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("gbPerMonthAllocated",cdk.validateString)(properties.gbPerMonthAllocated)),errors.wrap('supplied properties not correct for "MonthlyTransferProperty"')}function cfnInstanceMonthlyTransferPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_MonthlyTransferPropertyValidator(properties).assertSuccess(),{GbPerMonthAllocated:cdk.stringToCloudFormation(properties.gbPerMonthAllocated)}):properties}function CfnInstanceMonthlyTransferPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("gbPerMonthAllocated","GbPerMonthAllocated",properties.GbPerMonthAllocated!=null?cfn_parse.FromCloudFormation.getString(properties.GbPerMonthAllocated):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_NetworkingPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("monthlyTransfer",cdk.validateNumber)(properties.monthlyTransfer)),errors.collect(cdk.propertyValidator("ports",cdk.requiredValidator)(properties.ports)),errors.collect(cdk.propertyValidator("ports",cdk.listValidator(CfnInstance_PortPropertyValidator))(properties.ports)),errors.wrap('supplied properties not correct for "NetworkingProperty"')}function cfnInstanceNetworkingPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_NetworkingPropertyValidator(properties).assertSuccess(),{MonthlyTransfer:cdk.numberToCloudFormation(properties.monthlyTransfer),Ports:cdk.listMapper(cfnInstancePortPropertyToCloudFormation)(properties.ports)}):properties}function CfnInstanceNetworkingPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("monthlyTransfer","MonthlyTransfer",properties.MonthlyTransfer!=null?cfn_parse.FromCloudFormation.getNumber(properties.MonthlyTransfer):void 0),ret.addPropertyResult("ports","Ports",cfn_parse.FromCloudFormation.getArray(CfnInstancePortPropertyFromCloudFormation)(properties.Ports)),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_PortPropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("accessDirection",cdk.validateString)(properties.accessDirection)),errors.collect(cdk.propertyValidator("accessFrom",cdk.validateString)(properties.accessFrom)),errors.collect(cdk.propertyValidator("accessType",cdk.validateString)(properties.accessType)),errors.collect(cdk.propertyValidator("cidrListAliases",cdk.listValidator(cdk.validateString))(properties.cidrListAliases)),errors.collect(cdk.propertyValidator("cidrs",cdk.listValidator(cdk.validateString))(properties.cidrs)),errors.collect(cdk.propertyValidator("commonName",cdk.validateString)(properties.commonName)),errors.collect(cdk.propertyValidator("fromPort",cdk.validateNumber)(properties.fromPort)),errors.collect(cdk.propertyValidator("ipv6Cidrs",cdk.listValidator(cdk.validateString))(properties.ipv6Cidrs)),errors.collect(cdk.propertyValidator("protocol",cdk.validateString)(properties.protocol)),errors.collect(cdk.propertyValidator("toPort",cdk.validateNumber)(properties.toPort)),errors.wrap('supplied properties not correct for "PortProperty"')}function cfnInstancePortPropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_PortPropertyValidator(properties).assertSuccess(),{AccessDirection:cdk.stringToCloudFormation(properties.accessDirection),AccessFrom:cdk.stringToCloudFormation(properties.accessFrom),AccessType:cdk.stringToCloudFormation(properties.accessType),CidrListAliases:cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrListAliases),Cidrs:cdk.listMapper(cdk.stringToCloudFormation)(properties.cidrs),CommonName:cdk.stringToCloudFormation(properties.commonName),FromPort:cdk.numberToCloudFormation(properties.fromPort),Ipv6Cidrs:cdk.listMapper(cdk.stringToCloudFormation)(properties.ipv6Cidrs),Protocol:cdk.stringToCloudFormation(properties.protocol),ToPort:cdk.numberToCloudFormation(properties.toPort)}):properties}function CfnInstancePortPropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("accessDirection","AccessDirection",properties.AccessDirection!=null?cfn_parse.FromCloudFormation.getString(properties.AccessDirection):void 0),ret.addPropertyResult("accessFrom","AccessFrom",properties.AccessFrom!=null?cfn_parse.FromCloudFormation.getString(properties.AccessFrom):void 0),ret.addPropertyResult("accessType","AccessType",properties.AccessType!=null?cfn_parse.FromCloudFormation.getString(properties.AccessType):void 0),ret.addPropertyResult("cidrListAliases","CidrListAliases",properties.CidrListAliases!=null?cfn_parse.FromCloudFormation.getStringArray(properties.CidrListAliases):void 0),ret.addPropertyResult("cidrs","Cidrs",properties.Cidrs!=null?cfn_parse.FromCloudFormation.getStringArray(properties.Cidrs):void 0),ret.addPropertyResult("commonName","CommonName",properties.CommonName!=null?cfn_parse.FromCloudFormation.getString(properties.CommonName):void 0),ret.addPropertyResult("fromPort","FromPort",properties.FromPort!=null?cfn_parse.FromCloudFormation.getNumber(properties.FromPort):void 0),ret.addPropertyResult("ipv6Cidrs","Ipv6Cidrs",properties.Ipv6Cidrs!=null?cfn_parse.FromCloudFormation.getStringArray(properties.Ipv6Cidrs):void 0),ret.addPropertyResult("protocol","Protocol",properties.Protocol!=null?cfn_parse.FromCloudFormation.getString(properties.Protocol):void 0),ret.addPropertyResult("toPort","ToPort",properties.ToPort!=null?cfn_parse.FromCloudFormation.getNumber(properties.ToPort):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnInstance_StatePropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("code",cdk.validateNumber)(properties.code)),errors.collect(cdk.propertyValidator("name",cdk.validateString)(properties.name)),errors.wrap('supplied properties not correct for "StateProperty"')}function cfnInstanceStatePropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnInstance_StatePropertyValidator(properties).assertSuccess(),{Code:cdk.numberToCloudFormation(properties.code),Name:cdk.stringToCloudFormation(properties.name)}):properties}function CfnInstanceStatePropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("code","Code",properties.Code!=null?cfn_parse.FromCloudFormation.getNumber(properties.Code):void 0),ret.addPropertyResult("name","Name",properties.Name!=null?cfn_parse.FromCloudFormation.getString(properties.Name):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnStaticIpPropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return typeof properties!="object"&&errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("attachedTo",cdk.validateString)(properties.attachedTo)),errors.collect(cdk.propertyValidator("staticIpName",cdk.requiredValidator)(properties.staticIpName)),errors.collect(cdk.propertyValidator("staticIpName",cdk.validateString)(properties.staticIpName)),errors.wrap('supplied properties not correct for "CfnStaticIpProps"')}function cfnStaticIpPropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnStaticIpPropsValidator(properties).assertSuccess(),{StaticIpName:cdk.stringToCloudFormation(properties.staticIpName),AttachedTo:cdk.stringToCloudFormation(properties.attachedTo)}):properties}function CfnStaticIpPropsFromCloudFormation(properties){if(properties=properties==null?{}:properties,typeof properties!="object")return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("staticIpName","StaticIpName",cfn_parse.FromCloudFormation.getString(properties.StaticIpName)),ret.addPropertyResult("attachedTo","AttachedTo",properties.AttachedTo!=null?cfn_parse.FromCloudFormation.getString(properties.AttachedTo):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}class CfnStaticIp extends cdk.CfnResource{constructor(scope,id,props){super(scope,id,{type:CfnStaticIp.CFN_RESOURCE_TYPE_NAME,properties:props});jsiiDeprecationWarnings.aws_cdk_lib_aws_lightsail_CfnStaticIpProps(props),cdk.requireProperty(props,"staticIpName",this),this.attrIpAddress=cdk.Token.asString(this.getAtt("IpAddress")),this.attrIsAttached=this.getAtt("IsAttached"),this.attrStaticIpArn=cdk.Token.asString(this.getAtt("StaticIpArn")),this.staticIpName=props.staticIpName,this.attachedTo=props.attachedTo}static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnStaticIpPropsFromCloudFormation(resourceProperties),ret=new CfnStaticIp(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}inspect(inspector){jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector),inspector.addAttribute("aws:cdk:cloudformation:type",CfnStaticIp.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}get cfnProperties(){return{staticIpName:this.staticIpName,attachedTo:this.attachedTo}}renderProperties(props){return cfnStaticIpPropsToCloudFormation(props)}}exports.CfnStaticIp=CfnStaticIp,_d=JSII_RTTI_SYMBOL_1,CfnStaticIp[_d]={fqn:"aws-cdk-lib.aws_lightsail.CfnStaticIp",version:"2.8.0"},CfnStaticIp.CFN_RESOURCE_TYPE_NAME="AWS::Lightsail::StaticIp";
//# sourceMappingURL=lightsail.generated.js.map
